#!/bin/bash

GO_VERSION=1.21
COMMAND=$1
while [[ "$#" -gt 0 ]]; do
    case $1 in
    --go-version)
        GO_VERSION="$2"
        shift
        shift
        ;;
    *)
        COMMAND=$1
        shift
        break
        ;;
    esac
    shift
done

echo GO Lang version $GO_VERSION

# =============================================================================

if [ $COMMAND == "build" ]; then
    docker build -f Dockerfile -t usalko/rws:1.1.5 . --progress=plain
fi

if [ $COMMAND == "publish" ]; then
    IMAGE=usalko/rws:1.1.5
    docker push "$IMAGE" || {
        echo "Line 12: Error in push to dockerhub image $IMAGE... Exit..."
        exit 1
    }
fi

if [ $COMMAND == "test" ]; then
    curl --include \
        --no-buffer \
        --header "Connection: Upgrade" \
        --header "Upgrade: websocket" \
        --header "Host: localhost:8801" \
        --header "Origin: http://localhost:8801" \
        --header "Sec-WebSocket-Key: MTIzNDU2Nzg5MDEyMzQ1Ng==" \
        --header "Sec-WebSocket-Version: 13" \
        http://localhost:8801/ws
fi

function check_folder {
    FOLDER=$1
    mkdir -p "$FOLDER" || exit 1
    chmod a+rwx "$FOLDER"
    for SERVICE in "${SERVICES[@]}"; do
        mkdir -p "$FOLDER/$SERVICE" || exit 1
        chmod a+rwx "$FOLDER/$SERVICE"
    done
}

function check_history_folder {
    FOLDER=.history
    mkdir -p $FOLDER || exit 1
    chmod a+rwx $FOLDER
    for SERVICE in "${SERVICES[@]}"; do
        mkdir -p "$FOLDER/$SERVICE" || exit 1
        chmod a+rwx "$FOLDER/$SERVICE"
        touch "$FOLDER/$SERVICE/.bash_history"
        chmod a+rwx "$FOLDER/$SERVICE/.bash_history"
    done
}

function check_all_folders {
    # Check the data folders
    check_folder .data

    # Check the temporary folders
    check_folder .tmp

    # Check the logger folders
    check_folder .logs

    # Tune front folders
    mkdir -p .logs/front/nginx || exit 1
    chmod a+rwx .logs/front/nginx

    # Check the home folders
    check_history_folder
}

function start {

    check_all_folders

    if [ "$1" == "" ]; then
        docker compose up
    else
        # Parse arguments to detect service group "core"
        DOCKER_COMPOSE_ARGUMENTS=
        for ARG in "$@"; do
            if [ "$ARG" == "core" ]; then
                DOCKER_COMPOSE_ARGUMENTS="$DOCKER_COMPOSE_ARGUMENTS ${SERVICES_CORE[*]}"
            else
                DOCKER_COMPOSE_ARGUMENTS="$DOCKER_COMPOSE_ARGUMENTS $ARG"
            fi
        done

        docker compose up $DOCKER_COMPOSE_ARGUMENTS
    fi
}

if [ "$COMMAND" == "up" ] || [ "$COMMAND" == "start" ]; then
    echo 'Run docker images'

    CD=$PWD
    cd rws-tests || exit 1
    start "$@"
    cd "$CD" || exit 1
fi

function stop {
    if [ "$1" == "" ]; then
        docker compose down -v
    else
        docker compose stop "$@"
    fi
}

if [ "$COMMAND" == "stop" ] || [ "$COMMAND" == "down" ] || [ "$COMMAND" == "finish" ]; then
    echo 'Stop docker images'

    CD=$PWD
    cd rws-tests || exit 1
    stop "$@"
    cd "$CD" || exit 1
fi

if [ "$COMMAND" == "restart" ]; then
    echo 'Restart aps or whole system'

    CD=$PWD
    cd rws-tests || exit 1
    stop "$@"
    start "$@"
    cd "$CD" || exit 1
fi

if [ "$COMMAND" == "check" ]; then
    echo 'Check folders for the docker compose'

    CD=$PWD
    cd rws-tests || exit 1
    check_all_folders || {
        echo "Line 152: Error in build... Exit..."
        cd "$CD" || exit 1
        exit 1
    }
    cd "$CD" || exit 1

    # IMAGE=local/aps:v2${DOCKER_TAG_SUFFIX}
    # docker push "$IMAGE" || {
    #     echo "Line 268: Error in push to dockerhub image $IMAGE ... Exit..."
    #     exit 1
    # }
fi

# =================================================================================================

AVAILABLE_COMMANDS="build up start stop down finish restart test publish check"
echo ''
[[ $AVAILABLE_COMMANDS =~ (^| )$COMMAND($| ) ]] && echo 'Ok' || echo 'Unknown command: ' "$COMMAND" && echo 'Available commands are: ' "$AVAILABLE_COMMANDS"
